#version 450 core
#extension GL_ARB_separate_shader_objects : enable

#define SCENE_SHAPES_COUNT				    @SCENE_SHAPES_COUNT@
#define SCENE_SPHERE_SHAPES_COUNT		    @SCENE_SPHERE_SHAPES_COUNT@
#define SCENE_DIELECTRIC_MATERIALS_COUNT    @SCENE_DIELECTRIC_MATERIALS_COUNT@
#define SCENE_DIFFUSE_LIGHT_MATERIALS_COUNT @SCENE_DIFFUSE_LIGHT_MATERIALS_COUNT@
#define SCENE_LAMBERTIAN_MATERIALS_COUNT    @SCENE_LAMBERTIAN_MATERIALS_COUNT@
#define SCENE_METAL_MATERIALS_COUNT		    @SCENE_METAL_MATERIALS_COUNT@
#define SCENE_CHECKER_TEXTURES_COUNT	    @SCENE_CHECKER_TEXTURES_COUNT@
#define SCENE_CONSTANT_TEXTURES_COUNT	    @SCENE_CONSTANT_TEXTURES_COUNT@
#define SCENE_IMAGE_TEXTURES_COUNT		    @SCENE_IMAGE_TEXTURES_COUNT@
#define SCENE_NOISE_TEXTURES_COUNT		    @SCENE_NOISE_TEXTURES_COUNT@

// TYPE DEFINITIONS

// Indices

#define ArrayIndex uint

// Math constants

const float pi = 3.14159265358979323846264338327950288;
const float halfPi = 1.57079632679489661923132169163975144;
const float oneOverPi = 0.318309886183790671537767526745028724;
const float oneOverTwoPi = 0.159154943091895335768883763372514362;
const float infinity = 1.f / 0.f;

// Sizes

struct FloatExtent2D
{
	float width;
	float height;
};

struct UintExtent2D
{
	uint width;
	uint height;
};

// Pairs

struct MinMax
{
	float lo;
	float hi;
};

struct UV
{
	float u;
	float v;
};

// Vector types

#define Position vec3		// Represents arbitrary point in space.
#define Displacement vec3	// Represents a transmission from one point to another.
#define Direction vec3		// Represents a direction, must be a unit vector.

const Direction X_AXIS = Direction(1, 0, 0);
const Direction Y_AXIS = Direction(0, 1, 0);
const Direction Z_AXIS = Direction(0, 0, 1);

// Random

float randomUniform();
float randomUniform(in const float lo, in const float hi);
Direction randomDirection();
Direction randomInUnitDisk(in const Direction axis);
Direction randomInUnitDisk();

// Geometric types

struct Line
{
	Position origin;
	Direction direction;
};

Position pointOnLine(in const Line line, in const float t);

struct Sphere
{
	Position origin;
	float radius;
};

UV uvOnSphere(in const Position normalizedP);

// Colors

#define Color vec3		// Normalized color.
#define ColorAlpha vec4	// Normalized color with an alpha channel.
#define RGBA uvec4		// RGBA color representation with integer values between 0 and 255.

RGBA toRGBA8(in const Color color);

// Ray

struct Ray
{
	Line line;
	float time;
};

Color seenColor(Ray, const uint depth);

// Textures

#define TextureTypeID uint

const TextureTypeID TEXTURE_TYPE_CHECKER  = 1;
const TextureTypeID TEXTURE_TYPE_CONSTANT = 2;
const TextureTypeID TEXTURE_TYPE_IMAGE    = 3;
const TextureTypeID TEXTURE_TYPE_NOISE    = 4;

struct Texture
{
	TextureTypeID type;
	ArrayIndex index;
};

struct CheckerTexture
{
	float scale;
	Color odd;
	Color even;
};

struct ConstantTexture
{
	Color value;
};

struct ImageTexture
{
	ArrayIndex imageIndex;
	UintExtent2D size;
};

struct NoiseTexture
{
	float scale;
	Color baseColor;
};

Color colorAtTexture(in const Texture tex, in const UV uv, in const Position position);
Color colorAtTexture(in const CheckerTexture tex, in const UV uv, in const Position position);
Color colorAtTexture(in const ConstantTexture tex, in const UV uv, in const Position position);
Color colorAtTexture(in const ImageTexture tex, in const UV uv, in const Position position);
Color colorAtTexture(in const NoiseTexture tex, in const UV uv, in const Position position);

// Materials

#define MaterialTypeID uint

const MaterialTypeID MATERIAL_TYPE_DIELECTRIC    = 1;
const MaterialTypeID MATERIAL_TYPE_DIFFUSE_LIGHT = 2;
const MaterialTypeID MATERIAL_TYPE_LAMBERTIAN    = 3;
const MaterialTypeID MATERIAL_TYPE_METAL	     = 4;

struct Material
{
	MaterialTypeID type;
	ArrayIndex index;
};

struct DielectricMaterial
{
	float refractiveIndex;
	Texture albedo;
};

struct DiffuseLightMaterial
{
	Texture emit;
};

struct LambertianMaterial
{
	Texture albedo;
};

struct MetalMaterial
{
	float fuzz;
	Texture albedo;
};

// Shapes

#define ShapeTypeID uint

const ShapeTypeID SHAPE_TYPE_SPHERE = 1;

struct Shape
{
	ShapeTypeID type;
	ArrayIndex index;
	Material material;
};

struct SphereShape
{
	Sphere shapeData;
};

// Hit detection

struct HitRecord
{
	bool occurred;
	float t;
	Position point;
	Displacement normal;
	Material material;
	UV uv;
};

const HitRecord noHit = { false, infinity, Position(0), Displacement(0), Material(0, 0), UV(0, 0) };

HitRecord rayHitsAnything(in const Ray ray, in const MinMax t);
HitRecord rayHits(in const Ray ray, in const SphereShape sphere, in const MinMax t);

// Scattering

struct Scattering
{
	bool occurred;
	Color attenuation;
	Ray scatteredRay;
};

const Scattering noScattering = { false, Color(0), Ray(Line(Position(0), Direction(0)), 0) };

Scattering scatter(in const Material, in const Ray, in const HitRecord);
Scattering scatter(in const DielectricMaterial, in const Ray, in const HitRecord);
Scattering scatter(in const DiffuseLightMaterial, in const Ray, in const HitRecord);
Scattering scatter(in const LambertianMaterial, in const Ray, in const HitRecord);
Scattering scatter(in const MetalMaterial, in const Ray, in const HitRecord);

// Camera

struct Camera
{
	Position origin;
	Position lowerLeftCorner;
	Position horizontal;
	Position vertical;
	Displacement w;
	Displacement u;
	Displacement v;
	float lensRadius;
	MinMax time;
};

Ray shootRayAt(in const Camera, in const UV);

// I/O

layout(push_constant) uniform RenderInfo
{
	UintExtent2D imageExtent;
	uint sampleCount;
	Camera camera;
} renderInfo;

layout(binding = 0) readonly uniform Scene
{
	Texture sky;

#if SCENE_SHAPES_COUNT
	Shape shapes[SCENE_SHAPES_COUNT];
#endif

#if SCENE_SPHERE_SHAPES_COUNT
	SphereShape sphereShapes[SCENE_SPHERE_SHAPES_COUNT];
#endif

#if SCENE_DIELECTRIC_MATERIALS_COUNT
	DielectricMaterial dielectricMaterials[SCENE_DIELECTRIC_MATERIALS_COUNT];
#endif

#if SCENE_DIFFUSE_LIGHT_MATERIALS_COUNT
	DiffuseLightMaterial diffuseLightMaterials[SCENE_DIFFUSE_LIGHT_MATERIALS_COUNT];
#endif

#if SCENE_LAMBERTIAN_MATERIALS_COUNT
	LambertianMaterial lambertianMaterials[SCENE_LAMBERTIAN_MATERIALS_COUNT];
#endif

#if SCENE_METAL_MATERIALS_COUNT
	MetalMaterial metalMaterials[SCENE_METAL_MATERIALS_COUNT];
#endif

#if SCENE_CHECKER_TEXTURES_COUNT
	CheckerTexture checkerTextures[SCENE_CHECKER_TEXTURES_COUNT];
#endif

#if SCENE_CONSTANT_TEXTURES_COUNT
	ConstantTexture constantTextures[SCENE_CONSTANT_TEXTURES_COUNT];
#endif

#if SCENE_IMAGE_TEXTURES_COUNT
	ImageTexture imageTextures[SCENE_IMAGE_TEXTURES_COUNT];
#endif

#if SCENE_NOISE_TEXTURES_COUNT
	NoiseTexture noiseTextures[SCENE_NOISE_TEXTURES_COUNT];
#endif
} scene;

layout(binding = 1) uniform sampler2D textures[];

layout(binding = 2, rgba8ui) uniform writeonly uimage2D outImage;

// IMPLEMENTATIONS

void main()
{
	const float inverseImageWidth = 1.f / float(renderInfo.imageExtent.width);
	const float inverseImageHeight = 1.f / float(renderInfo.imageExtent.height);

	Color color;
	for (uint i = 0; i < renderInfo.sampleCount; ++i)
	{
		const UV uv = {
			float(gl_GlobalInvocationID.x + randomUniform()) * inverseImageWidth,
			(float(renderInfo.imageExtent.height - gl_GlobalInvocationID.y) + randomUniform()) * inverseImageHeight,
		};
		const Ray ray = shootRayAt(renderInfo.camera, uv);
		color += seenColor(ray, 50);
	}
	color /= float(renderInfo.sampleCount);

	imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), toRGBA8(color));
}

// Ray

Ray shootRayAt(in const Camera camera, in const UV uv)
{
	const Displacement randomSpotOnLens = camera.lensRadius * randomInUnitDisk();
	const Displacement offset = (camera.u * randomSpotOnLens.x) + (camera.v * randomSpotOnLens.y);
	const Position origin = camera.origin + offset;
	return Ray(Line(origin, camera.lowerLeftCorner + (uv.u * camera.horizontal) + (uv.v * camera.vertical) - origin),
		randomUniform());
}

Color seenColor(Ray ray, const uint depth)
{
	Color color = { 1.f, 1.f, 1.f };
	for (uint d = 0; d < depth; ++d)
	{
		const HitRecord hit = rayHitsAnything(ray, MinMax(0.0001f, infinity));
		if (!hit.occurred)
		{
			break;
		}

		const Scattering scattering = scatter(hit.material, ray, hit);
		if (!scattering.occurred)
		{
			break;
		}

		color *= scattering.attenuation;
		ray = scattering.scatteredRay;
	}
	return color * colorAtTexture(scene.sky, uvOnSphere(normalize(ray.line.direction)), ray.line.origin + ray.line.direction);
}

// Shapes

HitRecord rayHitsAnything(in const Ray ray, in const MinMax t)
{
	HitRecord closestHit = noHit;
	closestHit.t = t.hi;
#if SCENE_SHAPES_COUNT
	for (uint i = 0; i < SCENE_SHAPES_COUNT; ++i)
	{
		switch (scene.shapes[i].type)
		{
#	if SCENE_SPHERE_SHAPES_COUNT
		case SHAPE_TYPE_SPHERE:
		{
			const HitRecord hit = rayHits(ray, scene.sphereShapes[scene.shapes[i].index], MinMax(t.lo, closestHit.t));
			if (hit.occurred)
			{
				closestHit = hit;
				closestHit.material = scene.shapes[i].material;
			}
			break;
		}
#	endif
		}
	}
#endif
	return closestHit;
}

HitRecord rayHits(in const Ray ray, in const SphereShape sphere, in const MinMax t)
{
	const Sphere shapeData = sphere.shapeData;
	const Displacement oc = ray.line.origin - shapeData.origin;
	const float a = dot(ray.line.direction, ray.line.direction);
	const float b = dot(oc, ray.line.direction);
	const float c = dot(oc, oc) * pow(shapeData.radius, 2);
	const float discriminant = b * b - a * c;

	if (discriminant > 0)
	{
		float root = (-b - sqrt(discriminant)) / a;
		if (root > t.hi || root < t.lo)
		{
			root = (-b + sqrt(discriminant)) / a;
		}
		if (root <= t.hi && root >= t.lo)
		{
			const Position point = pointOnLine(ray.line, root);
			const Direction normal = (point - shapeData.origin) / abs(shapeData.radius);
			const UV uv = uvOnSphere(normal);
			return HitRecord(true, root, point, normal, Material(0, 0), uv);
		}
	}
	return noHit;
}

// Materials

Scattering scatter(in const Material material, in const Ray ray, in const HitRecord hit)
{
	switch (material.type)
	{
#if SCENE_DIELECTRIC_MATERIALS_COUNT
	case MATERIAL_TYPE_DIELECTRIC:
		return scatter(scene.dielectricMaterials[material.index], ray, hit);
#endif

#if SCENE_DIFFUSE_LIGHT_MATERIALS_COUNT
	case MATERIAL_TYPE_DIFFUSE_LIGHT:
		return scatter(scene.diffuseLightMaterials[material.index], ray, hit);
#endif

#if SCENE_LAMBERTIAN_MATERIALS_COUNT
	case MATERIAL_TYPE_LAMBERTIAN:
		return scatter(scene.lambertianMaterials[material.index], ray, hit);
#endif

#if SCENE_METAL_MATERIALS_COUNT
	case MATERIAL_TYPE_METAL:
		return scatter(scene.metalMaterials[material.index], ray, hit);
#endif
	}
	return noScattering;
}

Scattering scatter(in const DielectricMaterial material, in const Ray ray, in const HitRecord hit)
{
	return noScattering;
}

Scattering scatter(in const DiffuseLightMaterial material, in const Ray ray, in const HitRecord hit)
{
	return noScattering;
}

Scattering scatter(in const LambertianMaterial material, in const Ray ray, in const HitRecord hit)
{
	const Position target = hit.point + hit.normal + randomDirection();
	return Scattering(true, colorAtTexture(material.albedo, hit.uv, hit.point),
		Ray(Line(hit.point, target - hit.point), ray.time));
}

Scattering scatter(in const MetalMaterial material, in const Ray ray, in const HitRecord hit)
{
	return noScattering;
}

// Textures

Color colorAtTexture(in const Texture tex, in const UV uv, in const Position position)
{
	switch (tex.type)
	{
#if SCENE_CHECKER_TEXTURES_COUNT
	case TEXTURE_TYPE_CHECKER:
		return colorAtTexture(scene.checkerTextures[tex.index], uv, position);
#endif

#if SCENE_CONSTANT_TEXTURES_COUNT
	case TEXTURE_TYPE_CONSTANT:
		return colorAtTexture(scene.constantTextures[tex.index], uv, position);
#endif

#if SCENE_IMAGE_TEXTURES_COUNT
	case TEXTURE_TYPE_IMAGE:
		return colorAtTexture(scene.imageTextures[tex.index], uv, position);
#endif

#if SCENE_NOISE_TEXTURES_COUNT
	case TEXTURE_TYPE_NOISE:
		return colorAtTexture(scene.noiseTextures[tex.index], uv, position);
#endif
	}
	return Color(1.f);
}

Color colorAtTexture(in const CheckerTexture tex, in const UV uv, in const Position position)
{
	if (sin(tex.scale * position.x) * sin(tex.scale * position.y) * sin(tex.scale * position.z) < 0)
	{
		return tex.odd;
	}
	return tex.even;
}

Color colorAtTexture(in const ConstantTexture tex, in const UV uv, in const Position position)
{
	return tex.value;
}

Color colorAtTexture(in const ImageTexture tex, in const UV uv, in const Position position)
{
	return Color(1.f);
}

Color colorAtTexture(in const NoiseTexture tex, in const UV uv, in const Position position)
{
	return Color(1.f);
}

// Colors

RGBA toRGBA8(in const Color color)
{
	return uvec4(color.rgb * 255, 255);
}

// Geometric

Position pointOnLine(in const Line line, in const float t)
{
	return line.origin + (t * line.direction);
}

UV uvOnSphere(in const Position normalizedP)
{
	return UV(
        1 - (atan(normalizedP.z, normalizedP.x) + pi) * oneOverTwoPi,
        (asin(normalizedP.y) + halfPi) * oneOverPi);
}

// Random

float seed = 0;

float randomUniform()
{
	return fract(sin(seed += 0.01) * 100000.0);
}

float randomUniform(in const float lo, in const float hi)
{
	return lo + (randomUniform() * (hi - lo));
}

Direction randomDirection()
{
	while (true)
	{
		const Displacement direction = Displacement(
			randomUniform(-1.f, 1.f), randomUniform(-1.f, 1.f), randomUniform(-1.f, 1.f));
		const float l = length(direction);
		if (l * l < 1.f)
		{
			return direction;
		}
	}
}

Direction randomInUnitDisk(in const Direction axis)
{
	while (true)
	{
		const Displacement direction = (Direction(1.f) - axis) * randomDirection();
		if (dot(direction, direction) < 1.f)
		{
			return direction;
		}
	}
}

Direction randomInUnitDisk()
{
	return randomInUnitDisk(Z_AXIS);
}